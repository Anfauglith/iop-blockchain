Installing from Ubuntu package
==============================

We created deb packages for both Ubuntu 14.04 LTS and 16.04 LTS, you have to download them first. Unfortunately, Ubuntu does not support installing a custom deb file with automated dependency resolution. Once you have our IoP blockchain package, run

sudo dpkg -i /path/to/iop-blockchain-<version>.deb

Dpkg will install the package file but complain about some missing library dependencies, so it does not work yet. To resolve missing dependencies, run

sudo apt-get -f install

Now you should have a working IoP blockchain deployment.



Compiling from source
=====================

First you have to grab the source code, you can just clone our GitHub repository. Assuming you work on Ubuntu and don't have git installed yet, you can have our initial release (tagged version 0.13) with:

sudo apt-get install git
git clone https://github.com/Fermat-ORG/iop-blockchain.git
cd iop-blockchain
git checkout beta-1.0.0

Now comes the hard part, you will have to install the whole build environment which means an awful lot of tools, libraries and headers.

sudo apt-get install g++ make automake pkg-config libtool libboost-all-dev libssl-dev libevent-dev libqrencode-dev libprotobuf-dev protobuf-compiler libqt5gui5 qttools5-dev qttools5-dev-tools

We still need the BerkeleyDB library to support wallets. The code assumes wallets built with 4.8 by default, but this version is now outdated and not accessible from the default repositories. If you insist on using backwards-compatible wallets, you have to get the library from a custom archive repository as described here https://github.com/bitcoin/bitcoin/blob/master/doc/build-unix.md (look for add-apt-repository). We simply suggest using a recent libdb version instead.

sudo apt-get install libdb++-dev

Now you have to generate the build configurator files.

./autogen.sh

Now you have to generate makefiles that fit your environment. This will take a lot of time. If you are using backwards-compatible wallets with libdb4.8, you can remove the option from the following command:

./configure --with-incompatible-bdb

Finally, you can compile everything. This will take a very, very long time. Note that if you have a lot of CPU cores in your computer, you should use the -j option to compile with multiple threads, e.g. -j8 for eight compiler threads.

make

If you want to run the compiled binaries directly, you can find them in directory src, e.g. src/IoPd or src/qt/IoP-qt. Otherwise, you can deploy them as usual with

make install



Using the blockchain tool
=========================

TODO by Rodrigo
